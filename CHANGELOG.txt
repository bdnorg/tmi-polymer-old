- Polymer Starter Kit
- Display test data
- Framework for keys and commands
- Initial test framework
--- First commit
- keys: basic iron-a11y-keys work
- menu: basics work
- pointer: basics work
--- commit
- menu: space toggles,
- pointer: collapse from tab, wrap around, api to set, pointer is el
--- commit
- better pointer tests
--- commit
- initial tmi-browser and sync with wins
--- commit
- implemented pin window (shift-o)
- update SDK and merge
--- commit
- fiddled with gulpfile.js to work as extension (needs work):
  - added crisper, removed uglify and minify.
- removed routing (was broken in extension)
- style is broken
--- commit
- Changed keyMap
- Added background.js
- Added freezing.
--- commit
- Started on mocks for extension APIs.
- Add initApp.html to index.html and test/tmi...
--- commit
- Factored into elements: tmi-menu, tmi-browser
- switched to Mousetrap
- added _.bindAll and cleaned key mapping functions.
- added search
--- commit
- fixed tests
- hide windows w/o search matches.
- get rid of viewModel.  Just use viewTabs in nodes.
- added selecting
--- commit
- implemented put
- added icons
- got rid of iron-selector
- added tabCount
--- commit
- scrolling to pointer
--- commit
- Start on current tab
--- commit
- changed up/down movement to be in same level
- implemented bookmark and close
#! working version - prior to jstree exp1-3.
--- commit
- reverted after jstree / exp3.
- added mark / goto / 0-9
--- commit
- y sends tab to mark / new win.
- Fixed keys being intercepted in search.
- up / down transitions across wins and tabs
--- commit
- runs background.js, even when not running as extension
- drawTree: dynamically add app el
--- commit



---- head

--- Todo
## tree interface:: downward: draw model. search(?). getVisibleNodes.
  # toggle/un/select, get/clearSelected, id2node, left/right?
  # get/setPointer. nextprevVisible. collapse/expand. closePopup.
  # upward: user clicked/doubleclicked/selected/uncollapsed.
## app interface
  # upward: user clicked/doubleclicked/selected/uncollapsed.
  # which use dom query:
! right in search. test.
00 redraw tree(after moves). p/P before after point. pin insert point.
  -mark/goto no delay / limited chars / open vs point to via shift
  -pin to point. auto mark 0-9. move keybinding to background.js?
0 dedup on save bookmarks
0 refactor: business logic should be defined in a function with local variables!
  - biz logic separate from tree el. centralize biz logic. combine biz logic of
  - tmi-tree and app.js. move biz logic to background.js. use model everywhere.
  - mock chrome.* and use bg even in test.
0 fix movement
0 m, open bookmarks, save/restore order, names,
0 css, more in bg, refactor(kill initApp, remove extra loads), optimize all,
3 generic tree element (ludwig)
- id-# vs. id.
- Save LRU tabs. superstars.
2 move app.js to elements. get rid of initApp.
0 movement + {shift: jump, ctrl: bring tab? select?}.
  - jump: within level: {top, pin, active, bottom}
  # right: right toggle, again to active?
    - right-again: jump to top/bottom/active? open all? open tab details?
  # up/down only at same level?
- names: input, search(test), save
! search: if matches win it should show even if viewTabs.length === 0
- make sure not running polyfill (see WebComponentsReady)
- selected count at top
1 two copies of app.js in dist
2 move initApp into tmi-browser?
1 don't load extra stuff(unused elements, mocks, duplicate in vulcanized)
- pin: show which wins are pinned. reverse order of unpinned wins.
3 make generic tree of nodes element
0 numbers goto without pressing '
- fix and test treeQuery...
1 esc -> start over (clear search and begin at tab even when not in search mode)
1 make menu work
1 close popup after changing wintabs state
3 things like istab/type should be in the model, not just the dom

- keys: multiple trees, make menu/keys an element
- collections(pin, closed)
- styles: global, make pretty, fix in gulp->extension
- gulp: clean up, minify, uglify,
2 extension: clean manifest.
- dynamic docs
- labels
- auto close

--- Issues
- want deep selector: like to walk a tree
  - or stamp more into element's light dom but still get polymer's binding goodness
- get parentElement across shadow boundaries.
